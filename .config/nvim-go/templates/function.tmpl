{{define "function"}}
{{- $f := .}}

func {{.TestName}}(t *testing.T) {
	t.Parallel()
	{{- if .TestParameters}}
	type args struct {
		{{- range .TestParameters}}
			{{Param .}} {{.Type}}
		{{- end}}
	}
	{{- end}}
	{{- with .Receiver}}{{if and .IsStruct .Fields}}
	{{- end}}{{end}}
	{{- with .Receiver}}{{if and .IsStruct .Fields}}
	type setup{{.Type.Value}}Func func(t *testing.T,
		{{- if $f.TestParameters}}args args, {{end}}
		{{- range $f.TestResults}}{{Want .}} {{.Type}}, {{end -}}
	) {{if .Type.IsStar}}*{{end}}{{.Type.Value}}
	{{- end}}{{end}}
	tests := []struct {
    name string{{with .Receiver}}{{if not .IsStruct}}{{Receiver .}} {{.Type}}{{end}}{{end}}
		{{if .TestParameters}}args args{{end}}
		{{- range .TestResults}}
			{{Want .}} {{.Type}}
		{{- end}}
		{{with .Receiver}}{{if and .IsStruct .Fields}}setup{{.Type.Value}} setup{{.Type.Value}}Func{{end}}{{end}}
		{{if .ReturnsError}}wantErr bool{{end}}
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			t.Parallel()
			{{- with .Receiver}}{{if and .IsStruct .Fields}}
				{{Receiver .}} := tt.setup{{.Type.Value}}(t,
					{{- if $f.TestParameters}}tt.args,{{end}}
					{{- range $f.TestResults}}tt.{{Want .}},{{end -}}
				)
			{{- end}}{{end}}
			{{- range .Parameters}}
				{{- if .IsWriter}}
					{{Param .}} := &bytes.Buffer{}
				{{- end}}
			{{- end}}
			{{- if and (not .OnlyReturnsError) (not .OnlyReturnsOneValue) }}
				{{template "results" $f}} {{template "call" $f}}
			{{- end}}
			{{- if .ReturnsError}}
				if {{if .OnlyReturnsError}}err := {{template "call" $f}};{{end}} (err != nil) != tt.wantErr {
					t.Errorf("wantErr is %t, but err is %v", tt.wantErr, err)
				}
			{{- end}}
			{{- range .TestResults}}
				if diff := cmp.Diff(tt.{{Want .}},
				{{- if .IsWriter}}
					{{Param .}}.String()
				{{- else}}
					{{- if $f.OnlyReturnsOneValue}}
						{{- template "inline" $f}}
					{{- else}}
						{{- Got .}}
					{{- end}}
				{{- end}}); diff != "" {
					t.Errorf("Compare value mismatched (-got +want):%s\n", diff)
				}
			{{- end}}
		})
	}
}
{{end}}
